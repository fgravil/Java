<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Rename type &apos;Node&apos; to &apos;topNode&apos;&#x0D;&#x0A;- Original project: &apos;Storage&apos;&#x0D;&#x0A;- Original element: &apos;Node&apos;&#x0D;&#x0A;- Renamed element: &apos;topNode&apos;&#x0D;&#x0A;- Update references to refactored element&#x0D;&#x0A;- Update textual occurrences in comments and strings" description="Rename type &apos;Node&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.type" input="/src&lt;{Node.java[Node" matchStrategy="1" name="topNode" qualified="false" references="true" similarDeclarations="false" stamp="1436413874975" textual="false" version="1.0"/>&#x0A;<refactoring comment="Rename type &apos;topNode&apos; to &apos;Node&apos;&#x0D;&#x0A;- Original project: &apos;Storage&apos;&#x0D;&#x0A;- Original element: &apos;topNode&apos;&#x0D;&#x0A;- Renamed element: &apos;Node&apos;&#x0D;&#x0A;- Update references to refactored element&#x0D;&#x0A;- Update textual occurrences in comments and strings" description="Rename type &apos;topNode&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.type" input="/src&lt;{topNode.java[topNode" matchStrategy="1" name="Node" qualified="false" references="true" similarDeclarations="false" stamp="1436413968171" textual="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;comparable&apos; from expression &apos;((Comparable&lt;K&gt;)newKey)&apos;&#x0D;&#x0A;- Original project: &apos;Storage&apos;&#x0D;&#x0A;- Variable name: &apos;comparable&apos;&#x0D;&#x0A;- Destination method: &apos;RegNode.addTraverse()&apos;&#x0D;&#x0A;- Variable expression: &apos;((Comparable&lt;K&gt;)newKey)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;comparable&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;{RegNode.java" name="comparable" replace="true" selection="630 24" stamp="1436414971000" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;newKey2&apos; from expression &apos;(Comparable&lt;K&gt;)newKey&apos;&#x0D;&#x0A;- Original project: &apos;Storage&apos;&#x0D;&#x0A;- Variable name: &apos;newKey2&apos;&#x0D;&#x0A;- Destination method: &apos;RegNode.addTraverse()&apos;&#x0D;&#x0A;- Variable expression: &apos;(Comparable&lt;K&gt;)newKey&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;newKey2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;{RegNode.java" name="newKey2" replace="true" selection="654 22" stamp="1436414994000" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;newKey3&apos; from expression &apos;(Comparable&lt;K&gt;)newKey&apos;&#x0D;&#x0A;- Original project: &apos;Storage&apos;&#x0D;&#x0A;- Variable name: &apos;newKey3&apos;&#x0D;&#x0A;- Destination method: &apos;RegNode.addTraverse()&apos;&#x0D;&#x0A;- Variable expression: &apos;(Comparable&lt;K&gt;)newKey&apos;" description="Extract local variable &apos;newKey3&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;{RegNode.java" name="newKey3" replace="false" selection="651 22" stamp="1436415007672" version="1.0"/>&#x0A;&#x0A;<refactoring clone="true" comment="Infer generic type arguments on &apos;Storage&apos;&#x0D;&#x0A;- Original project: &apos;Storage&apos;&#x0D;&#x0A;- Original elements:&#x0D;&#x0A;     BinaryTree.java&#x0D;&#x0A;- Assume clone() returns an instance of the receiver type&#x0D;&#x0A;- Leave unconstrained type arguments raw" description="Infer generic type arguments" element1="/src&lt;{BinaryTree.java" flags="6" id="org.eclipse.jdt.ui.infer.typearguments" leave="true" stamp="1436415876807" version="1.0"/>
</session>